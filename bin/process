#!/usr/bin/env python

import argparse
import os
import shutil
import sqlite3
from jinja2 import Environment, FileSystemLoader


def copy_static_files(template_dir, output_dir):
    static_files = [
        'css/bootstrap.min.css',
    ]

    for static_file in static_files:
        dir_path, _ = os.path.split(static_file)
        dst_dir = os.path.join(output_dir, dir_path)
        if not os.path.exists(dst_dir):
            os.makedirs(dst_dir)
        src_file = os.path.join(template_dir, static_file)
        shutil.copy(src_file, dst_dir)

def render_templates(template_dir, output_dir):
    env = Environment(loader=FileSystemLoader(template_dir))
    # Arbitrary restriction right now to limit templates to HTML files.
    templates = [t for t in env.list_templates() if t.endswith('html')]
    for template_file in templates:
        out_file = os.path.join(output_dir, template_file)
        template = env.get_template(template_file)
        with open(out_file, 'w') as f:
            f.write(template.render())

def render_site(template_dir, output_dir):
    copy_static_files(template_dir, output_dir)
    render_templates(template_dir, output_dir)

def get_options():
    parser = argparse.ArgumentParser(description="The implementation game")
    parser.add_argument("--config-file", metavar='FILE',
                        help="YAML file containing all implementations.")
    parser.add_argument("--database", "-d", metavar="DB",
                        help="Output database to get results.",
                        default="implgame.db")
    parser.add_argument("--game-dir",
                        help="Directory containing source for the games.")
    parser.add_argument("--template-dir",
                        help="Directory containing templates.",
                        default="www")
    parser.add_argument("--output-dir",
                        help="Directory for finished site.",
                        default="output")
    return parser.parse_args()

def main():
    args = get_options()
    render_site(args.template_dir, args.output_dir)


if __name__ == '__main__':
    main()
