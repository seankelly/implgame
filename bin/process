#!/usr/bin/env python

import argparse
import os
import shutil
import sqlite3
import yaml
from jinja2 import Environment, FileSystemLoader


# Some minor code duplication. Trying to keep it to a minimum!
class BenchResults():
    def __init__(self, db_path):
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path)

class Site(object):
    def __init__(self, config, db):
        self.config = config
        self.db = db
        self.template_env = self.build_environment()

    def build_environment(self):
        env = {
            'games': self.all_games()
        }
        return env

    def all_games(self):
        games = {}
        for game_name in self.config['game']:
            game = self.config['game'][game_name]
            games[game_name] = {
                'name': game_name,
                'description': game['description'],
            }
        return games

    def render(self, template_dir, output_dir):
        self.copy_static_files(template_dir, output_dir)
        self.render_templates(template_dir, output_dir)


    def copy_static_files(self, template_dir, output_dir):
        static_files = [
            'css/bootstrap.min.css',
        ]

        for static_file in static_files:
            dir_path, _ = os.path.split(static_file)
            dst_dir = os.path.join(output_dir, dir_path)
            if not os.path.exists(dst_dir):
                os.makedirs(dst_dir)
            src_file = os.path.join(template_dir, static_file)
            shutil.copy(src_file, dst_dir)

    def render_templates(self, template_dir, output_dir):
        env = Environment(loader=FileSystemLoader(template_dir))
        # Arbitrary restriction right now to limit templates to HTML files.
        templates = [t for t in env.list_templates() if t.endswith('html')]
        for template_file in templates:
            out_file = os.path.join(output_dir, template_file)
            template = env.get_template(template_file)
            with open(out_file, 'w') as f:
                f.write(template.render(self.template_env))

def get_options():
    parser = argparse.ArgumentParser(description="The implementation game")
    parser.add_argument("--config-file", metavar='FILE',
                        help="YAML file containing all implementations.",
                        default="implgame.yaml")
    parser.add_argument("--database", "-d", metavar="DB",
                        help="Output database to get results.",
                        default="implgame.db")
    parser.add_argument("--game-dir",
                        help="Directory containing source for the games.")
    parser.add_argument("--template-dir",
                        help="Directory containing templates.",
                        default="www")
    parser.add_argument("--output-dir",
                        help="Directory for finished site.",
                        default="output")
    return parser.parse_args()

def main():
    args = get_options()
    with open(args.config_file, 'r') as cf:
        config_file_yaml = yaml.safe_load(cf)

    benchdb = BenchResults(args.database)
    site = Site(config_file_yaml, benchdb)
    site.render(args.template_dir, args.output_dir)


if __name__ == '__main__':
    main()
