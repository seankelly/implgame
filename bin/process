#!/usr/bin/env python

import argparse
import os
import shutil
import sqlite3
import yaml
from collections import namedtuple
from jinja2 import Environment, FileSystemLoader


Result = namedtuple('Result', ['run_id', 'passed', 'exitstatus', 'cmd',
                               'level', 'output', 'cputime', 'walltime',
                               'memusage', 'impl', 'game', 'run_when'])


# Some minor code duplication. Trying to keep it to a minimum!
class BenchResults(object):
    def __init__(self, config_file_yaml, db_path):
        self.config_file = config_file_yaml
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row
        self.runs_cached = self._load_runs(self.conn)
        self.games = set()
        self.impls = set()
        self.results = {}

    def all_results(self):
        results = {'impl': {}, 'game': {}}
        for run_tuple in list(self.runs_cached.keys()):
            run = self.runs_cached[run_tuple]
            impl, game = run_tuple
            # Get the best result for this run and tag it with the
            # implementation of game used. Add the result to the list of best
            # runs for each implementation and game.
            run_id = run['id']
            impl_name = self.config_file['impl'][impl]['name']
            best_result = self.get_best_result(run_id)
            highest_level = self.config_file['game'][game]['levels'][-1]['args']
            if impl not in results['impl']:
                results['impl'][impl] = []
            if game not in results['game']:
                results['game'][game] = []
            if highest_level in best_result:
                results['impl'][impl].append(best_result[highest_level])
                results['game'][game].append(best_result[highest_level])
        return results

    def get_best_result(self, run_id):
        summary = {}
        for result in self._load_result(run_id):
            level = result.level
            if result.level in summary:
                best_run = summary[level]
                if not best_run.passed:
                    # If the "best" run failed, skip trying to find the best
                    # run for this level.
                    continue
                if not result.passed:
                    # If it failed, set this level to the failed one.
                    summary[level] = result
                elif result.cputime < best_run.cputime:
                    summary[level] = result
            else:
                summary[level] = result
        return summary

    @staticmethod
    def _load_runs(conn):
        cursor = conn.cursor()
        cursor.execute("SELECT id, run_when, impl, game, version FROM run")
        cache = {}
        for row in cursor:
            run = (row['impl'], row['game'])
            if (run not in cache or
                    cache[run]['run_when'] < row['run_when']):
                cache[run] = row
        return cache

    def _load_result(self, run_id):
        if run_id in self.results:
            return self.results[run_id]
        cursor = self.conn.cursor()
        cursor.execute(
                "SELECT run_id, passed, exitstatus, cmd, level, output, cputime, walltime, memusage, impl, game, run_when "
                "FROM result JOIN run on run_id = run.id "
                "WHERE run_id = ? ORDER BY level desc", (run_id,))
        result_cache = [Result._make(row) for row in cursor.fetchall()]
        self.results[run_id] = result_cache
        return result_cache

class Site(object):
    def __init__(self, config, results):
        self.config = config
        self.results = results
        self.template_env = self.build_environment()

    def build_environment(self):
        env = {
            'games': self.all_games(),
            'impls': self.all_impls(),
            'results': self.results.all_results(),
        }
        return env

    def all_games(self):
        games = {}
        for game_name in self.config['game']:
            game = self.config['game'][game_name]
            games[game_name] = {
                'name': game_name,
                'description': game['description'],
            }
        return games

    def all_impls(self):
        impls = {}
        for impl_name in self.config['impl']:
            impl = self.config['impl'][impl_name]
            impls[impl_name] = {
                'name': impl['name'],
            }
        return impls

    def render(self, template_dir, output_dir):
        self.copy_static_files(template_dir, output_dir)
        self.render_templates(template_dir, output_dir)


    def copy_static_files(self, template_dir, output_dir):
        static_files = [
            'css/bootstrap.min.css',
        ]

        for static_file in static_files:
            dir_path, _ = os.path.split(static_file)
            dst_dir = os.path.join(output_dir, dir_path)
            if not os.path.exists(dst_dir):
                os.makedirs(dst_dir)
            src_file = os.path.join(template_dir, static_file)
            shutil.copy(src_file, dst_dir)

    def render_page_group(self, env, output_dir, group):
        group_html = '%s.html' % group
        group_key = '%ss' % group
        template = env.get_template(group_html)
        for page in self.template_env[group_key]:
            group_file = os.path.join(output_dir, '%s-%s.html' % (group, page))
            group_env = {
                group: page,
                'results': self.template_env['results'][group].get(page, []),
            }
            with open(group_file, 'w') as output:
                output.write(template.render(group_env))

    def render_templates(self, template_dir, output_dir):
        env = Environment(loader=FileSystemLoader(template_dir))

        # Render the index file first.
        index_file = os.path.join(output_dir, 'index.html')
        template = env.get_template('index.html')
        with open(index_file, 'w') as f:
            f.write(template.render(self.template_env))

        self.render_page_group(env, output_dir, 'impl')
        self.render_page_group(env, output_dir, 'game')

def get_options():
    parser = argparse.ArgumentParser(description="The implementation game")
    parser.add_argument("--config-file", metavar='FILE',
                        help="YAML file containing all implementations.",
                        default="implgame.yaml")
    parser.add_argument("--database", "-d", metavar="DB",
                        help="Output database to get results.",
                        default="implgame.db")
    parser.add_argument("--game-dir",
                        help="Directory containing source for the games.")
    parser.add_argument("--template-dir",
                        help="Directory containing templates.",
                        default="www")
    parser.add_argument("--output-dir",
                        help="Directory for finished site.",
                        default="output")
    return parser.parse_args()

def main():
    args = get_options()
    with open(args.config_file, 'r') as cf:
        config_file_yaml = yaml.safe_load(cf)

    benchdb = BenchResults(config_file_yaml, args.database)
    site = Site(config_file_yaml, benchdb)
    site.render(args.template_dir, args.output_dir)


if __name__ == '__main__':
    main()
